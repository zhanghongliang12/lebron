// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: product_rpc.proto

package product_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductRpc_Ping_FullMethodName = "/product_rpc.Product_rpc/Ping"
)

// ProductRpcClient is the client API for ProductRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductRpcClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type productRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewProductRpcClient(cc grpc.ClientConnInterface) ProductRpcClient {
	return &productRpcClient{cc}
}

func (c *productRpcClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ProductRpc_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductRpcServer is the server API for ProductRpc service.
// All implementations must embed UnimplementedProductRpcServer
// for forward compatibility
type ProductRpcServer interface {
	Ping(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedProductRpcServer()
}

// UnimplementedProductRpcServer must be embedded to have forward compatible implementations.
type UnimplementedProductRpcServer struct {
}

func (UnimplementedProductRpcServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedProductRpcServer) mustEmbedUnimplementedProductRpcServer() {}

// UnsafeProductRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductRpcServer will
// result in compilation errors.
type UnsafeProductRpcServer interface {
	mustEmbedUnimplementedProductRpcServer()
}

func RegisterProductRpcServer(s grpc.ServiceRegistrar, srv ProductRpcServer) {
	s.RegisterService(&ProductRpc_ServiceDesc, srv)
}

func _ProductRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductRpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductRpcServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductRpc_ServiceDesc is the grpc.ServiceDesc for ProductRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_rpc.Product_rpc",
	HandlerType: (*ProductRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ProductRpc_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_rpc.proto",
}
