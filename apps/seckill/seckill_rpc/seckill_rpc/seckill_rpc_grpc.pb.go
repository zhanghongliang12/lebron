// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: seckill_rpc.proto

package seckill_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SeckillRpc_Ping_FullMethodName = "/seckill_rpc.Seckill_rpc/Ping"
)

// SeckillRpcClient is the client API for SeckillRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeckillRpcClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type seckillRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewSeckillRpcClient(cc grpc.ClientConnInterface) SeckillRpcClient {
	return &seckillRpcClient{cc}
}

func (c *seckillRpcClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, SeckillRpc_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SeckillRpcServer is the server API for SeckillRpc service.
// All implementations must embed UnimplementedSeckillRpcServer
// for forward compatibility
type SeckillRpcServer interface {
	Ping(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedSeckillRpcServer()
}

// UnimplementedSeckillRpcServer must be embedded to have forward compatible implementations.
type UnimplementedSeckillRpcServer struct {
}

func (UnimplementedSeckillRpcServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSeckillRpcServer) mustEmbedUnimplementedSeckillRpcServer() {}

// UnsafeSeckillRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeckillRpcServer will
// result in compilation errors.
type UnsafeSeckillRpcServer interface {
	mustEmbedUnimplementedSeckillRpcServer()
}

func RegisterSeckillRpcServer(s grpc.ServiceRegistrar, srv SeckillRpcServer) {
	s.RegisterService(&SeckillRpc_ServiceDesc, srv)
}

func _SeckillRpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SeckillRpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SeckillRpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SeckillRpcServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// SeckillRpc_ServiceDesc is the grpc.ServiceDesc for SeckillRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeckillRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "seckill_rpc.Seckill_rpc",
	HandlerType: (*SeckillRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SeckillRpc_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "seckill_rpc.proto",
}
